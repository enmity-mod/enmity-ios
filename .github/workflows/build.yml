name: Build (and release)
on:
  push:
    paths:
    - '**.h'
    - '**.js'
    - '**.x'
    - 'control'
    - '**.plist'
    - 'Makefile'
    - '.github/workflows/build.yml'
    tags: 
    - '*'
  workflow_dispatch:
  pull_request:
  release:
    types:
    - created

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Prepare Theos
        uses: beerpiss/theos-action@v1

      - name: Prepare Azule
        uses: actions/checkout@v3
        with: 
          repository: Al4ise/Azule
          path: Azule

      - name: Prepare Enmity Patcher
        run : |
          curl -L https://github.com/enmity-mod/enmity-patcher/releases/latest/download/patcher.mac-amd64 -o ${{ github.workspace }}/patcher
          chmod +x patcher

      - name: Build package
        id: find_deb
        run: |
          gmake clean package FINALPACKAGE=1
          echo "::set-output name=deb::$(find packages -name "*.deb" -print -quit)"
          echo "::set-output name=deb_basename::$(basename $(find packages -name "*.deb" -print -quit))"

      - name: Create Enmity.ipa
        run : |
          ${{ github.workspace }}/patcher
          mkdir out
          ${{ github.workspace }}/Azule/azule -i Enmity.ipa -o out -f ${{ steps.find_deb.outputs.deb }}
          mv $(find out -name "*.ipa" -print -quit) out/Enmity.ipa

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.find_deb.outputs.deb_basename }}
          path: ${{ steps.find_deb.outputs.deb }} 

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: Enmity.ipa
          path: out/Enmity.ipa

  upload-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name = 'push' && startsWith(github.ref, 'refs/tags'))
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      
      - name: Attaching binaries to release
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          assets=()
          for asset in ./artifacts/**/*; do
            if [ -d "$asset" ]; then continue; fi
            assets+=("$asset")
          done
          if [ "${{ github.event_name }}" = "release" ] && [ ! "$(gh release view $GITHUB_REF_NAME --json assets | jq '.assets | length')" = "2" ]; then
            # Only reupload if stuff is missing (somehow)
            gh release upload --clobber $GITHUB_REF_NAME "${assets[@]}"  
          elif ! gh release view $GITHUB_REF_NAME 2>&1 >/dev/null; then
            # Only create new release if there isn't one already
            gh release create $GITHUB_REF_NAME -t $GITHUB_REF_NAME "${assets[@]}"
          fi  
